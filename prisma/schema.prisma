generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Gym {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String?
  latitude    Float?
  longitude   Float?
  valueMonth  Float?
  description String?
  phoneWpp    String?
  instagram   String?
  cupomActive Boolean?      @default(false)
  logo        String?
  website     String? 
  anualStart String?
  details1    String?
  details2    String?
  details3    String?
  details4    String?
  Profesionals GymProfesional[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Profesional {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId 
  Gyms       GymProfesional[]

  name       String
  photoLink  String?
  phoneWpp   String?
}

model GymProfesional {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  gym         Gym           @relation(fields: [gymId], references: [id])
  gymId       String       @db.ObjectId 
  profesional Profesional   @relation(fields: [profesionalId], references: [id])
  profesionalId String   @db.ObjectId 
}


model DeviceTokenExpo {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  token       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
 
model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  password    String
  phoneWpp    String
  photoLink   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    CommentsInCommunity[]
}

model CommentsInCommunity {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  comment     String
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  community   Community  @relation(fields: [communityId], references: [id])
  communityId String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Community {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  description String
  photoLink   String?
  likes       Int @default(0)
  comments    CommentsInCommunity[]
  userId      String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

