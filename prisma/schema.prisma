generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Gym {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     String?
  latitude    Float?
  longitude   Float?
  shifts      Shift[]
  listPrices  Prices[]
  valueMonth  Float?
  description String?
  phoneWpp    String?
  instagram   String?
  cupomActive Boolean?      @default(false)
  logo        String?
  website     String? 
  anualStart String?
  details1    String?
  details2    String?
  details3    String?
  details4    String?
  Profesionals GymProfesional[]
  images      String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Prices {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  gym         Gym           @relation(fields: [gymId], references: [id])
  gymId       String        @db.ObjectId
  price       Float
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Shift  {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  gym         Gym           @relation(fields: [gymId], references: [id])
  gymId       String        @db.ObjectId
  day         String
  shift       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Profesional {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId 
  Gyms       GymProfesional[]

  name       String
  photoLink  String?
  phoneWpp   String?
}

model GymProfesional {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  gym         Gym           @relation(fields: [gymId], references: [id])
  gymId       String       @db.ObjectId 
  profesional Profesional   @relation(fields: [profesionalId], references: [id])
  profesionalId String   @db.ObjectId 
}


model DeviceTokenExpo {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  token       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
 
model User {
  id          String               @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  password    String
  phoneWpp    String
  photoLink   String?
  community   Community[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  comments    CommentsInCommunity[]
  likes       Like[]                // Adicione este campo para representar os likes que o usuário deu
}


model CommentsInCommunity {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  comment     String
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  community   Community  @relation(fields: [communityId], references: [id])
  communityId String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Like {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  community    Community  @relation(fields: [communityId], references: [id])
  communityId  String     @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Community {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  description      String
  photoLink        String?
  likes            Int                  @default(0)
  comments         CommentsInCommunity[]
  user             User                 @relation(fields: [userId], references: [id])
  userId           String               @db.ObjectId
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  communityLikes   Like[]               // Representa os likes recebidos pela comunidade
}
model Trainner {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  photoLink   String?
  instagram   String?
  phoneWpp    String?
  price       Float?
  description String?
  about       String?
  actuation   Actuation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Actuation {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  trainnerId  String        @db.ObjectId
  trainner    Trainner      @relation(fields: [trainnerId], references: [id])
  actuation   String
  icon        String        @default("")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model PostDinamically {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String?        @default("Atenção você poderá ganhar prêmios ao usar a nossa comunidade!")
  description String?        @default("A cada 10 postagens você ganha a chance de girar a roleta e ganhar prêmios!")
  buttonTitle String?        @default("Quero ganhar prêmios!")
  photoLink   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

